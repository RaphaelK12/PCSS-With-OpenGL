#version 330 core

//input
in vec3 Normal;
in vec3 FragPos;
in vec4 FragLightSpace;

uniform vec3 LIGHT_COLOR;
uniform vec3 LIGHT_POS;
uniform vec3 VIEW_POS;
uniform vec3 OBJ_COLOR;
uniform sampler2D shadowMap;

// Ouput data
out vec4 color;


float ShadowCalculation(vec4 FragLightSpace)
{
    // perform perspective divide
    vec3 projCoords = FragLightSpace.xyz / FragLightSpace.w;
    
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(LIGHT_POS - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -5; x <= 5; ++x)
    {
        for(int y = -5; y <= 5; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;
        }
    }
    shadow /= 121.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}


void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LIGHT_COLOR;
    
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LIGHT_POS - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * LIGHT_COLOR;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(VIEW_POS - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * LIGHT_COLOR;
        
    float shadow = ShadowCalculation(FragLightSpace);
    vec3 result = (ambient + (1.0 - shadow) * (diffuse + specular)) * OBJ_COLOR;
    //color = FragLightSpace / FragLightSpace.w;
    
    //color = vec4(vec3(shadow), 1.0);
    
    //color = vec4(textureSize(shadowMap, 0).x / 2048.0,0, 0, 1);
    color = vec4(result, 1.0);
}

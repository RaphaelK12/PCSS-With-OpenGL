#version 330 core

//input
in vec3 Normal;
in vec3 FragPos;


uniform vec3 LIGHT_COLOR;
uniform vec3 LIGHT_POS;
uniform vec3 VIEW_POS;
uniform vec3 OBJ_COLOR;

// Ouput data
out vec4 color;

void main()
{
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * LIGHT_COLOR;
    
    // diffuse
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LIGHT_POS - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * LIGHT_COLOR;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(VIEW_POS - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * LIGHT_COLOR;
        
    vec3 result = (ambient + diffuse + specular) * OBJ_COLOR;
    color = vec4(result, 1.0);

}
